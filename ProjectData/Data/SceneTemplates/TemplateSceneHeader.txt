#pragma once
#include <Logic/Scene/Scene.h>
#include <Logic/Event/EventListener.h>
#include <Utils/StringHash.h>
#include <string_view>

class $scene_name : public yang::Scene
{
public:
    /// Default constructor
    /// \param owner - reference to the owner game layer
    $scene_name(yang::IGameLayer& owner);

    /// Is called when scene first loads. After load it is in paused state
    virtual void OnSceneLoad() override final;

    /// Is called when scene is paused
    virtual void OnScenePause() override final;

    /// Is called when scene resumes from paused state
    virtual void OnSceneResume() override final;

    /// Is called when scene unloads (resource freeing should happen there)
    virtual void OnSceneUnload() override final;

    /// Updates scene. Is called every frame.
    /// \param deltaSeconds - time since last frame
    virtual void Update(float deltaSeconds) override final;

    static constexpr std::string_view kName = "$scene_name";           ///< Name of the scene
    static constexpr uint32_t kHashName = StringHash32(kName.data());  ///< Hash of the scene's name
    
    /// Get scene name
    /// \return $scene_name
    static constexpr std::string_view GetName() { return kName; }

    /// Get scene hash name
    /// \return scene hash name
    static constexpr uint32_t GetHashName() { return kHashName; }
private:
    /// Registers for the events this scene is subscribed for
    void RegisterEvents();

    /// Stops listen to events
    void UnregisterEvents();
};